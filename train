def train(model, train_loader, optimizer, criterion):
    model.train()
    total_loss = 0
    for i, (batch_x, batch_pulse_condition,batch_step_condition,batch_decay_condition, batch_y) in enumerate(train_loader):
        batch_x = batch_x.to(device)
        batch_pulse_condition = batch_pulse_condition.to(device)
        batch_step_condition = batch_step_condition.to(device)
        batch_decay_condition = batch_decay_condition.to(device)
        batch_y = batch_y.to(device)
        optimizer.zero_grad()

        # 获取模型输出
        outputs = model(batch_x, batch_pulse_condition,batch_step_condition,batch_decay_condition)

        # 重塑 batch_y 以匹配 outputs 的形状
        batch_y_reshaped = batch_y.view_as(outputs)

        # 计算损失
        loss = criterion(outputs, batch_y_reshaped)

        # 反向传播和优化
        loss.backward()
        optimizer.step()

        total_loss += loss.item()

    avg_loss = total_loss / len(train_loader.dataset)
    return avg_loss


def evaluate(model, eval_loader, optimizer, criterion):
    model.eval()
    total_loss = 0
    with torch.no_grad():
         for i, (batch_x, batch_pulse_condition,batch_step_condition,batch_decay_condition, batch_y) in enumerate(eval_loader):
             batch_x = batch_x.to(device)
             batch_pulse_condition = batch_pulse_condition.to(device)
             batch_step_condition = batch_step_condition.to(device)
             batch_decay_condition = batch_decay_condition.to(device)
             batch_y = batch_y.to(device)


             # 获取模型输出
             outputs = model(batch_x, batch_pulse_condition,batch_step_condition,batch_decay_condition)

             # 重塑 batch_y 以匹配 outputs 的形状
             batch_y_reshaped = batch_y.view_as(outputs)

             # 计算损失
             loss = criterion(outputs, batch_y_reshaped)



             total_loss += loss.item()

    avg_loss = total_loss / len(eval_loader.dataset)
    return avg_loss
